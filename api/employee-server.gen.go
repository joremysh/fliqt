// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List employees
	// (GET /employees)
	ListEmployees(c *gin.Context, params ListEmployeesParams)
	// Creates a new employee
	// (POST /employees)
	AddEmployee(c *gin.Context)
	// Cancel a day off request
	// (POST /employees/day-offs/{id}/cancel)
	CancelDayOff(c *gin.Context, id int64)
	// Deletes a employee by ID
	// (DELETE /employees/{id})
	DeleteEmployee(c *gin.Context, id int64)
	// Returns a employee by ID
	// (GET /employees/{id})
	FindEmployeeByID(c *gin.Context, id int64)
	// Updates a employee
	// (PUT /employees/{id})
	UpdateEmployee(c *gin.Context, id int64)
	// List day off records
	// (GET /employees/{id}/day-offs)
	ListDayOffs(c *gin.Context, id int64, params ListDayOffsParams)
	// Submit a day off request
	// (POST /employees/{id}/day-offs)
	SubmitDayOff(c *gin.Context, id int64)

	// (GET /liveness)
	GetLiveness(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListEmployees operation middleware
func (siw *ServerInterfaceWrapper) ListEmployees(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEmployeesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filters", c.Request.URL.Query(), &params.Filters)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filters: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListEmployees(c, params)
}

// AddEmployee operation middleware
func (siw *ServerInterfaceWrapper) AddEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddEmployee(c)
}

// CancelDayOff operation middleware
func (siw *ServerInterfaceWrapper) CancelDayOff(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CancelDayOff(c, id)
}

// DeleteEmployee operation middleware
func (siw *ServerInterfaceWrapper) DeleteEmployee(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteEmployee(c, id)
}

// FindEmployeeByID operation middleware
func (siw *ServerInterfaceWrapper) FindEmployeeByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FindEmployeeByID(c, id)
}

// UpdateEmployee operation middleware
func (siw *ServerInterfaceWrapper) UpdateEmployee(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateEmployee(c, id)
}

// ListDayOffs operation middleware
func (siw *ServerInterfaceWrapper) ListDayOffs(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDayOffsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "startTimeFrom" -------------

	err = runtime.BindQueryParameter("form", true, false, "startTimeFrom", c.Request.URL.Query(), &params.StartTimeFrom)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startTimeFrom: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "startTimeTo" -------------

	err = runtime.BindQueryParameter("form", true, false, "startTimeTo", c.Request.URL.Query(), &params.StartTimeTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startTimeTo: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filters", c.Request.URL.Query(), &params.Filters)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filters: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListDayOffs(c, id, params)
}

// SubmitDayOff operation middleware
func (siw *ServerInterfaceWrapper) SubmitDayOff(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SubmitDayOff(c, id)
}

// GetLiveness operation middleware
func (siw *ServerInterfaceWrapper) GetLiveness(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLiveness(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/employees", wrapper.ListEmployees)
	router.POST(options.BaseURL+"/employees", wrapper.AddEmployee)
	router.POST(options.BaseURL+"/employees/day-offs/:id/cancel", wrapper.CancelDayOff)
	router.DELETE(options.BaseURL+"/employees/:id", wrapper.DeleteEmployee)
	router.GET(options.BaseURL+"/employees/:id", wrapper.FindEmployeeByID)
	router.PUT(options.BaseURL+"/employees/:id", wrapper.UpdateEmployee)
	router.GET(options.BaseURL+"/employees/:id/day-offs", wrapper.ListDayOffs)
	router.POST(options.BaseURL+"/employees/:id/day-offs", wrapper.SubmitDayOff)
	router.GET(options.BaseURL+"/liveness", wrapper.GetLiveness)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

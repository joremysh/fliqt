// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List employees
	// (GET /employees)
	ListEmployees(c *gin.Context, params ListEmployeesParams)
	// Creates a new employee
	// (POST /employees)
	AddEmployee(c *gin.Context)
	// Cancel a day off request
	// (POST /employees/day-offs/{id}/cancel)
	CancelDayOff(c *gin.Context, id int64)
	// Deletes a employee by ID
	// (DELETE /employees/{id})
	DeleteEmployee(c *gin.Context, id int64)
	// Returns a employee by ID
	// (GET /employees/{id})
	FindEmployeeByID(c *gin.Context, id int64)
	// Updates a employee
	// (PUT /employees/{id})
	UpdateEmployee(c *gin.Context, id int64)
	// List day off records
	// (GET /employees/{id}/day-offs)
	ListDayOffs(c *gin.Context, id int64, params ListDayOffsParams)
	// Submit a day off request
	// (POST /employees/{id}/day-offs)
	SubmitDayOff(c *gin.Context, id int64)

	// (GET /liveness)
	GetLiveness(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListEmployees operation middleware
func (siw *ServerInterfaceWrapper) ListEmployees(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEmployeesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filters", c.Request.URL.Query(), &params.Filters)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filters: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListEmployees(c, params)
}

// AddEmployee operation middleware
func (siw *ServerInterfaceWrapper) AddEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddEmployee(c)
}

// CancelDayOff operation middleware
func (siw *ServerInterfaceWrapper) CancelDayOff(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CancelDayOff(c, id)
}

// DeleteEmployee operation middleware
func (siw *ServerInterfaceWrapper) DeleteEmployee(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteEmployee(c, id)
}

// FindEmployeeByID operation middleware
func (siw *ServerInterfaceWrapper) FindEmployeeByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FindEmployeeByID(c, id)
}

// UpdateEmployee operation middleware
func (siw *ServerInterfaceWrapper) UpdateEmployee(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateEmployee(c, id)
}

// ListDayOffs operation middleware
func (siw *ServerInterfaceWrapper) ListDayOffs(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDayOffsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "startTimeFrom" -------------

	err = runtime.BindQueryParameter("form", true, false, "startTimeFrom", c.Request.URL.Query(), &params.StartTimeFrom)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startTimeFrom: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "startTimeTo" -------------

	err = runtime.BindQueryParameter("form", true, false, "startTimeTo", c.Request.URL.Query(), &params.StartTimeTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startTimeTo: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filters", c.Request.URL.Query(), &params.Filters)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filters: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListDayOffs(c, id, params)
}

// SubmitDayOff operation middleware
func (siw *ServerInterfaceWrapper) SubmitDayOff(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SubmitDayOff(c, id)
}

// GetLiveness operation middleware
func (siw *ServerInterfaceWrapper) GetLiveness(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLiveness(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/employees", wrapper.ListEmployees)
	router.POST(options.BaseURL+"/employees", wrapper.AddEmployee)
	router.POST(options.BaseURL+"/employees/day-offs/:id/cancel", wrapper.CancelDayOff)
	router.DELETE(options.BaseURL+"/employees/:id", wrapper.DeleteEmployee)
	router.GET(options.BaseURL+"/employees/:id", wrapper.FindEmployeeByID)
	router.PUT(options.BaseURL+"/employees/:id", wrapper.UpdateEmployee)
	router.GET(options.BaseURL+"/employees/:id/day-offs", wrapper.ListDayOffs)
	router.POST(options.BaseURL+"/employees/:id/day-offs", wrapper.SubmitDayOff)
	router.GET(options.BaseURL+"/liveness", wrapper.GetLiveness)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

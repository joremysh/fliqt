// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List employees
	// (GET /employees)
	ListEmployees(c *gin.Context, params ListEmployeesParams)
	// Creates a new employee
	// (POST /employees)
	AddEmployee(c *gin.Context)
	// Cancel a day off request
	// (POST /employees/day-offs/{id}/cancel)
	CancelDayOff(c *gin.Context, id int64)
	// Deletes a employee by ID
	// (DELETE /employees/{id})
	DeleteEmployee(c *gin.Context, id int64)
	// Returns a employee by ID
	// (GET /employees/{id})
	FindEmployeeByID(c *gin.Context, id int64)
	// Updates a employee
	// (PUT /employees/{id})
	UpdateEmployee(c *gin.Context, id int64)
	// List day off records
	// (GET /employees/{id}/day-offs)
	ListDayOffs(c *gin.Context, id int64, params ListDayOffsParams)
	// Submit a day off request
	// (POST /employees/{id}/day-offs)
	SubmitDayOff(c *gin.Context, id int64)

	// (GET /liveness)
	GetLiveness(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListEmployees operation middleware
func (siw *ServerInterfaceWrapper) ListEmployees(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEmployeesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filters", c.Request.URL.Query(), &params.Filters)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filters: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListEmployees(c, params)
}

// AddEmployee operation middleware
func (siw *ServerInterfaceWrapper) AddEmployee(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddEmployee(c)
}

// CancelDayOff operation middleware
func (siw *ServerInterfaceWrapper) CancelDayOff(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CancelDayOff(c, id)
}

// DeleteEmployee operation middleware
func (siw *ServerInterfaceWrapper) DeleteEmployee(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteEmployee(c, id)
}

// FindEmployeeByID operation middleware
func (siw *ServerInterfaceWrapper) FindEmployeeByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FindEmployeeByID(c, id)
}

// UpdateEmployee operation middleware
func (siw *ServerInterfaceWrapper) UpdateEmployee(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateEmployee(c, id)
}

// ListDayOffs operation middleware
func (siw *ServerInterfaceWrapper) ListDayOffs(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDayOffsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "startTimeFrom" -------------

	err = runtime.BindQueryParameter("form", true, false, "startTimeFrom", c.Request.URL.Query(), &params.StartTimeFrom)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startTimeFrom: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "startTimeTo" -------------

	err = runtime.BindQueryParameter("form", true, false, "startTimeTo", c.Request.URL.Query(), &params.StartTimeTo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startTimeTo: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filters", c.Request.URL.Query(), &params.Filters)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filters: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListDayOffs(c, id, params)
}

// SubmitDayOff operation middleware
func (siw *ServerInterfaceWrapper) SubmitDayOff(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SubmitDayOff(c, id)
}

// GetLiveness operation middleware
func (siw *ServerInterfaceWrapper) GetLiveness(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLiveness(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/employees", wrapper.ListEmployees)
	router.POST(options.BaseURL+"/employees", wrapper.AddEmployee)
	router.POST(options.BaseURL+"/employees/day-offs/:id/cancel", wrapper.CancelDayOff)
	router.DELETE(options.BaseURL+"/employees/:id", wrapper.DeleteEmployee)
	router.GET(options.BaseURL+"/employees/:id", wrapper.FindEmployeeByID)
	router.PUT(options.BaseURL+"/employees/:id", wrapper.UpdateEmployee)
	router.GET(options.BaseURL+"/employees/:id/day-offs", wrapper.ListDayOffs)
	router.POST(options.BaseURL+"/employees/:id/day-offs", wrapper.SubmitDayOff)
	router.GET(options.BaseURL+"/liveness", wrapper.GetLiveness)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
